// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model represents users in the application
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String? // User's name
  email          String?   @unique // User's email (unique)
  emailVerified  DateTime? // Date and time when email was verified
  image          String? // User's profile image URL
  hashedPassword String? // Hashed password (may be null for OAuth logins)

  createdAt   DateTime @default(now()) // Date and time of user creation
  updatedAt   DateTime @updatedAt // Date and time of last update
  favoriteIds String[] @db.ObjectId // Array of favorite listing IDs

  accounts     Account[] // Linked external accounts
  listings     Listing[] // Listings created by the user
  reservations Reservation[] // Reservations made by the user
}

// Account model represents external accounts linked to a user :facebook, twitter - not oauth , just a connection
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type     String // Type of account (e.g., 'oauth')
  provider String // Provider (e.g., 'google', 'facebook')

  providerAccountId String // ID assigned by the external provider
  refresh_token     String? @db.String // Refresh token for OAuth
  access_token      String? @db.String // Access token for OAuth
  expires_at        Int? // Expiration timestamp for tokens

  token_type String? // Token type for OAuth
  scope      String? // Scopes granted for OAuth

  id_token      String? @db.String // ID token for OAuth
  session_state String? // Session state for OAuth

  userId String @db.ObjectId // Reference to the user's ID
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Unique combination of provider and providerAccountId
}

// Listing model represents property listings in the application
model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String // Listing title
  description String // Listing description
  imageSrc    String // URL of the listing image

  category      String // Listing category
  roomCount     Int // Number of rooms
  bathroomCount Int // Number of bathrooms
  guestCount    Int // Maximum number of guests
  locationValue String // Listing location

  userId String @db.ObjectId // Reference to the user who created the listing
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[] // Reservations associated with the listing
  price        Int // Listing price

  createdAt DateTime @default(now()) // Date and time of listing creation
  updatedAt DateTime @updatedAt // Date and time of last update
}

// Reservation model represents reservations made by users for listings
model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  User   User?   @relation(fields: [userId], references: [id]) //can be query from this to user
  userId String? @db.ObjectId // Reference to the user making the reservation

  Listing   Listing? @relation(fields: [listingId], references: [id])
  listingId String?  @db.ObjectId // Reference to the listing being reserved

  startDate  DateTime // Start date of the reservation
  endDate    DateTime // End date of the reservation
  totalPrice Int // Total price of the reservation

  createdAt DateTime @default(now()) // Date and time of reservation creation
}
